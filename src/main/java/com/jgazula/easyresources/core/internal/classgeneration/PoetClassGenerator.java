package com.jgazula.easyresources.core.internal.classgeneration;

import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;

import java.io.IOException;
import java.lang.reflect.Type;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.ResourceBundle;
import javax.lang.model.element.Modifier;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This implementation generates a Java file using the JavaPoet library.
 */
public class PoetClassGenerator implements ClassGenerator {

    private static final Logger LOGGER = LoggerFactory.getLogger(PoetClassGenerator.class);

    private static final String INDENT = "    ";
    private static final String GENERATED_BY_COMMENT = "This class was auto generated by %s.";

    private final ClassGeneratorConfig config;
    private final List<FieldSpec> fieldSpecs = new ArrayList<>();
    private final List<MethodSpec> methodSpecs = new ArrayList<>();

    public PoetClassGenerator(ClassGeneratorConfig config) {
        this.config = config;
    }

    @Override
    public ClassGenerator addPublicConstantString(String variableName, String variableValue) {
        var fieldSpec = FieldSpec.builder(String.class, variableName)
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                .initializer("$S", variableValue)
                .build();
        addFieldSpec(fieldSpec);
        return this;
    }

    @Override
    public ClassGenerator addPrivateFinalField(ClassGeneratorVariable field) {
        var fieldSpec = FieldSpec.builder(field.type(), field.name())
                .addModifiers(Modifier.PRIVATE, Modifier.FINAL)
                .build();
        addFieldSpec(fieldSpec);
        return this;
    }

    @Override
    public ClassGenerator addConstructorWithArgs(List<ClassGeneratorVariable> args) {
        MethodSpec.Builder builder = MethodSpec.constructorBuilder()
                .addModifiers(Modifier.PUBLIC);

        args.forEach(arg -> {
            builder.addParameter(arg.type(), arg.name())
                    .addStatement("this.$N = $N", arg.name(), arg.name());
        });

        var methodSpec = builder.build();
        addMethodSpec(methodSpec);
        return this;
    }

    @Override
    public Path write(Path directory) throws IOException {
        var typeSpec = TypeSpec.classBuilder(config.className())
                .addModifiers(Modifier.PUBLIC)
                .addFields(fieldSpecs)
                .addMethods(methodSpecs)
                .build();

        var formattedTimestamp = ZonedDateTime.now()
                .format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG));

        Path outputPath = JavaFile.builder(config.packageName(), typeSpec)
                .addFileComment(String.format(GENERATED_BY_COMMENT, config.generatedBy()))
                .addFileComment("\n")
                .addFileComment(formattedTimestamp)
                .indent(INDENT)
                .build()
                .writeToPath(directory, StandardCharsets.UTF_8);
        LOGGER.debug("Wrote Java file for {}.{} to {}", config.packageName(), config.className(), outputPath);

        return outputPath;
    }

    protected void addFieldSpec(FieldSpec fieldSpec) {
        fieldSpecs.add(fieldSpec);
    }

    protected void addMethodSpec(MethodSpec methodSpec) {
        methodSpecs.add(methodSpec);
    }
}
